! 
! Computes the source term, space and scale flux
! in the generalized Kolmogorov equation specialized
! for channel flow, as in Marati, Casciola, Piva, JFM 2004,
! equation 3.4 and following definitions.
! 
! This program allows distributed memory parallelization by distributing
! the arrays containing the terms of the Generalized Kolmogorov Equations (GKE) 
! along the wall-normal direction. 
! 
! ------------------------------------------------------------------------------
! 
! Comment "#define wholefield" to reduce memory requirement by reading only one
! (iy1,iy2) pair of velocity planes at a time. This increases the amount of I/O 
! and supposedly slows down calculations
! 
#define wholefield
! 
! ------------------------------------------------------------------------------
! If you use this code and find it helpful please cite
! 
! D. Gatti et al., "An efficient numerical method for the Generalized Kolmogorov
! Equation", Journal of Turbulence, (submitted, 2018)
! ------------------------------------------------------------------------------
! 
! Copyright (C) 2018  Dr. Davide Gatti
! 
! This program is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! any later version.
!
! This program is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <https://www.gnu.org/licenses/>.
!
! Contacts:
!
! Dr. Davide Gatti  
! davide.gatti [at] kit.edu
! msc.davide.gatti [at] gmail.com
! 
! Karlsruhe Institute of Technology
! Institute of Fluid Dynamics
! KaiserstraÃŸe 10
! 76131 Karlsruhe 
! 

USE ../gkedata
USE ../wallclock
REAL t1,t2,t3,t4

SHARED ARRAY(-1..ny+1,0..mx-1,0..mz-1) OF GKETERMS gke=0
SHARED ARRAY(1..2,1..2,0..nxd-1,0..nzd-1) OF STRUCTURE(COMPLEX UU,VV,WW,UV,PV,uuu,uuv,uuw,vvu,vvv,vvw,wwu,wwv,www,uvu,uvv,uwu,uww,vwv,vww) R=0
#define pR(A,f) A(*,iz).f.REALIFIED(ix)
#define mR(A,f) A(*,(nzd-iz) MOD nzd).f.REALIFIED((2*nxd-ix) MOD (2*nxd))
#define R0(A,f) A(*,0).f.REALIFIED(0)
! Compute Kolmogorov Equation
! -------------------------------
LOOP files FOR if=nfmin TO nfmax BY dn
 WRITE "iproc=",iproc, "   ","file ", if, " of ", nfmax;
 ! Open V and P fields
 STRING field_name = WRITE("Dati.cart."if".fld"); diskimage = OPEN(field_name);
 STRING pressure_name = WRITE('pField'if'.fld');  pressuredata=OPEN(pressure_name);
#ifdef wholefield
 WRITE "iproc=",iproc, "   ","Reading data..."; t1=wallclock();
  Vtot=diskimage.Vimage; CLOSE diskimage
  ptot=pressuredata; CLOSE pressuredata; t2=wallclock();
 WRITE "iproc=",iproc, "   ","Reading took ", t2-t1, " seconds"
#endif
   LOOP outer FOR IY1=nyl TO nyh; 
     WRITE "iproc=",iproc, "   ", "   ", "IY1= ",IY1, "of", nyh; gke(IY1+(0..ny-2*IY1),*,*)=0; t1=wallclock();
     ! Reload data for this IY1, need for averaging "on disk"
     WRITE "iproc=",iproc, "   ", "   ", "   ", "Reading gke data..."; t3=wallclock();
     IF if>nfmin THEN gke(IY1+(0..ny-2*IY1),*,*)=gkedata(startpos(IY1)+(0..ny-2*IY1),*,*) ELSE gke(IY1+(0..ny-2*IY1),*,*)=0; END IF; t4=wallclock();
     WRITE "iproc=",iproc, "   ", "   ", "   ", "Reading took ", t4-t3, " seconds"
     LOOP FOR sig IN (1,-1)
        ! Symmetry-aware helper variable  
        iy1=IF sig=1 THEN IY1 ELSE ny-IY1
        ! Open V and p field
#ifdef wholefield
        V(*,*,1)=Vtot(iy1,*,*); mean(1)=uiujimage.meandata(iy1); p(*,*,1)=ptot(iy1,*,*); uiuj(1)=uiujimage.uiujdata(iy1)
#else
        bufV = diskimage.Vimage(iy1,*,*); V(*,*,1)=bufV; mean(1)=uiujimage.meandata(iy1); uiuj(1)=uiujimage.uiujdata(iy1)
        pressuredata=OPEN(pressure_name); bufp = pressuredata(iy1,*,*); p(*,*,1)=bufp; 
#endif
        ! Remove mean
        WITH mean(1),V(0,0,1): u.REAL=~-U; w.REAL=~-W; p(0,0,1)=~-P;
        PARALLEL LOOP FOR ismp=0 TO nsmp-1
          convolutions(V(*,*,1),VVd(*,*,1))
          LOOP inner FOR IY2=IY1 TO ny-IY1
            iy2 = IF sig=1  THEN IY2 ELSE ny-IY2
            ! Open V and p field, remove mean
            IF ismp=0 THEN 
#ifdef wholefield
              V(*,*,2)=Vtot(iy2,*,*); p(*,*,2)=ptot(iy2,*,*); mean(2)=uiujimage.meandata(iy2); uiuj(2)=uiujimage.uiujdata(iy2); 
#else
              bufV = diskimage.Vimage(iy2,*,*); V(*,*,2)=bufV; mean(2)=uiujimage.meandata(iy2);
              bufp = pressuredata(iy2,*,*);     p(*,*,2)=bufp; uiuj(2)=uiujimage.uiujdata(iy2);
#endif
              WITH mean(2),V(0,0,2): u.REAL=~-U; w.REAL=~-W; p(0,0,2)=~-P;
            END IF
            SYNC(ismp,nsmp)
            convolutions(V(*,*,2),VVd(*,*,2));
            LOOP FOR i1=1 TO 2 AND i2=1 TO 2
              LOOP FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
                R(i1,i2,ix,nz+1..nzd-nz-1)=0
                DO WITH V(ix,iz,*), VVd(ix,izd,*), R(i1,i2,ix,izd):
                  UU=u(i1)|u(i2);   VV=v(i1)|v(i2);   WW=w(i1)|w(i2);   UV=u(i1)|v(i2);   PV=p(ix,iz,i1)|v(i2);
                  uuu=uu(i1)|u(i2); uuv=uu(i1)|v(i2); uuw=uu(i1)|w(i2); vvu=vv(i1)|u(i2); vvv=vv(i1)|v(i2); vvw=vv(i1)|w(i2);
                  wwu=ww(i1)|u(i2); wwv=ww(i1)|v(i2); www=ww(i1)|w(i2); uvu=uv(i1)|u(i2); uvv=uv(i1)|v(i2); uwu=uw(i1)|u(i2);
                  uww=uw(i1)|w(i2); vwv=vw(i1)|v(i2); vww=vw(i1)|w(i2);
                FOR iz=-nz TO nz
                WITH R(i1,i2,ix,*):  INLINE LOOP FOR iii IN (UU,VV,WW,UV,PV,uuu,uuv,uuw,vvu,vvv,vvw,wwu,wwv,www,uvu,uvv,uwu,uww,vwv,vww); IFT(iii); REPEAT
              REPEAT LOOP
              IF ismp=0 THEN R(i1,i2,nx+1..nxd-1)=0
              SYNC(ismp,nsmp)
              DO WITH R(i1,i2,*,iz): 
                INLINE LOOP FOR iii IN (UU,VV,WW,UV,PV,uuu,uuv,uuw,vvu,vvv,vvw,wwu,wwv,www,uvu,uvv,uwu,uww,vwv,vww); RFT(iii); REPEAT
              FOR iz=ismp*nzd DIV nsmp TO (ismp+1)*nzd DIV nsmp -1
            REPEAT
            SYNC(ismp,nsmp)
        ! Compute GKE terms
#define Rturb(f,g) ( pR(R(1,2),f) - mR(R(2,1),f) + 2*pR(R(1,2),g) - 2*mR(R(2,1),g) + R0(R(2,2),f) - R0(R(1,1),f) )
#define Cturb(f,g) ( pR(R(1,2),f) + mR(R(2,1),f) - 2*pR(R(1,2),g) - 2*mR(R(2,1),g) + R0(R(2,2),f) + R0(R(1,1),f) )
#define Rsum(f)    ( R0(R(2,2),f) + R0(R(1,1),f) -   pR(R(1,2),f) -   mR(R(2,1),f) )
#define Ravg(f)    ( R0(R(2,2),f) - R0(R(1,1),f) -   pR(R(1,2),f) +   mR(R(2,1),f) )
            DO WITH gke(IY2,jx,jz), mean(*), uiuj(*):
              ix=imx(jx); iz=imz(jz)
              phiR(1) = ~+     Rturb(uuu,uuu) + Rturb(vvu,uvv) + Rturb(wwu,uww)
              phiR(2) = ~+sig*[Rturb(uuv,uvu) + Rturb(vvv,vvv) + Rturb(wwv,vww)]
              phiR(3) = ~+     Rturb(uuw,uwu) + Rturb(vvw,vwv) + Rturb(www,www)
              iscaleENER = Rsum(UU)+Rsum(VV)+Rsum(WW); scaleENER = ~+iscaleENER
              phiR(1) = ~+iscaleENER*[ U(2)-U(1) ]; phiR(2) = ~+0; phiR(3) = ~+iscaleENER*[ W(2)-W(1) ]
              phiC = ~+0.5*sig*[ Cturb(uuv,uvu)+Cturb(vvv,vvv)+Cturb(wwv,vww) ]; phiC = ~+2*sig*[ Rsum(PV) ]
              scalePROD = ~-[ Rsum(UV) ]*[Uy(1)+Uy(2)]-[ Ravg(UV) ]*[Uy(2)-Uy(1)]-[SUM psdiss(1,i)+psdiss(2,i) FOR i=1 TO 3]
            FOR jx=ismp*mx DIV nsmp TO (ismp+1)*mx DIV nsmp -1 AND jz=0 TO mz-1
        ! phiR.rVISC.(xx,zz) requires derivatives in homogeneous directions of scaleENER
            DO 
              DO Vd(*,iz).v.REALIFIED(ix)=Rsum(UU)+Rsum(VV)+Rsum(WW) FOR ix=0 TO 2*nxd-1 
              WITH Vd(*,iz): HFT(v)
            FOR iz=ismp*nzd DIV nsmp TO (ismp+1)*nzd DIV nsmp -1
            SYNC(ismp,nsmp)
            DO
              WITH Vd(ix,*): FFT(v)
              Vd(ix,nz+1..nzd-nz-1)=0; DO WITH Vd(ix,izd): u=I*alfa0*ix*v;  w=I*beta0*iz*v FOR iz=-nz TO nz 
              WITH Vd(ix,*): IFT(u); IFT(w)
            FOR ix=ismp*(nx+1) DIV nsmp TO (ismp+1)*(nx+1) DIV nsmp -1
            IF ismp=0 THEN Vd(nx+1..nxd-1)=0
            SYNC(ismp,nsmp)
            DO WITH Vd(*,iz): RFT(u); RFT(w) FOR iz=ismp*nzd DIV nsmp TO (ismp+1)*nzd DIV nsmp -1
            SYNC(ismp,nsmp)
            DO 
              DO WITH gke(IY2,ix,iz): phiR(1) = ~-2*ni*Vd(*,imz(iz)).u.REALIFIED(imx(ix)); phiR(3) = ~-2*ni*Vd(*,imz(iz)).w.REALIFIED(imx(ix)) FOR iz=0 TO mz-1
            FOR ix=ismp*mx DIV nsmp TO (ismp+1)*mx DIV nsmp -1
            SYNC(ismp,nsmp)
          REPEAT inner
        REPEAT
     REPEAT
     WRITE "iproc=",iproc, "   ", "   ", "IY1= ",IY1, "of", nyh, " took ", (wallclock()-t1)/60 , " minutes"
     ! Average on disk
     WRITE "iproc=",iproc,"   ", "   ", "   ", "Writing gke data..."; t3=wallclock();
     IF if=nfmax THEN WITH gke(IY1+(0..ny-2*IY1),*,*):INLINE LOOP FOR i IN (phiR,phiC,scaleENER,scalePROD) i=~*0.5/nftot;REPEAT
     gkedata(startpos(IY1)+(0..ny-2*IY1),*,*)=gke(IY1+(0..ny-2*IY1),*,*); t4=wallclock();
     WRITE "iproc=",iproc,"   ", "   ", "   ", "Writing took ", t4-t3, " seconds"
  REPEAT outer
  CLOSE(diskimage)
  CLOSE(pressuredata)
REPEAT files

CLOSE(gkedata)
CLOSE(uiujimage)

